########################
# nginx.upstream.ssl
########################

# setup web server and static files as single nginx server
# build with: docker build -t kikirikii-web-ssl -f build.upstream.ssl.docker .
#

# Sets the path, format, and configuration for a buffered log write
log_format compression '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $upstream_addr '
        '"$http_referer" "$http_user_agent"';

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # localhost: docker container needs host ip to resolve correctly and avoid inner loops
    #upstream static_route {
    #    server 192.168.1.100:80;
    #}

    # localhost: docker container needs host ip to resolve correctly and avoid inner loops
    upstream api_route {
        server 192.168.1.101:8080;
    }

     # localhost: docker container needs host ip to resolve correctly and avoid inner loops
     upstream public_route {
        server 192.168.1.101:8080;
     }

    # localhost: docker container needs host ip to resolve correctly and avoid inner loops
    upstream websocket_route {
        server 192.168.1.101:8080;
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        server_name  localhost;
        root   /usr/share/nginx/html;
        index  index.html;

        ssl_certificate /usr/share/nginx/html/conf/localhost.crt;
        ssl_certificate_key /usr/share/nginx/html/conf/localhost.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;

        # intermediate configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # replace with the IP address of your resolver
        resolver 8.8.8.8;

        access_log /var/log/nginx/access.log compression;
        #access_log /var/log/nginx/error.log debug;
        #rewrite_log on;

        location / {
            try_files $uri $uri/ /index.html;
        }

        location /public-upload/ {
            #proxy_pass http://static_route$request_uri;
            try_files $uri $uri/ /index.html;
        }

        location /stomp { rewrite ^ /_stomp last; }
        location /stomp/websocket/ { rewrite ^ /_stomp last; }
        location /stomp/websocket/test { rewrite ^ /_stomp last; }

        location = /_stomp {
            internal;
            #proxy_pass http://websocket_route/stomp/websocket/test$uri$is_args$args;

            #proxy_http_version 1.1;
            #proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection "Upgrade";

            proxy_pass http://websocket_route$request_uri;

        }

        location /public { rewrite ^ /_public last; }
        location /public/institut.med/ { rewrite ^ /_public last; }
        location /public/app/configuration { rewrite ^ /_public last; }
        location /public/login { rewrite ^ /_public last; }
        location /public/token { rewrite ^ /_public last; }
        location /public/validate { rewrite ^ /_public last; }

        location /user/ { rewrite ^ /_auth last; }

        location = /_public {
            internal;
            proxy_pass http://public_route$request_uri;
         }

         location = /_auth {
            internal;
            proxy_pass http://api_route$request_uri;
         }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

    }
